#ifndef BATTLEFIELD_HPP_INCLUDED
#define BATTLEFIELD_HPP_INCLUDED

#include"header.hpp"
#include <SFML/Graphics.hpp>

#define BOX 11
#define COLBOX 10
#define TOT 103

int b,c,chk=0,vchk=0;
char ch='h';
int cnt=1;

class BattleField:public cscreen
{
public:
    sf::RectangleShape rectangle2[TOT];
    sf::RectangleShape rectangle5[TOT];
    BattleField();
    virtual int run(sf::RenderWindow &app);
    void checkh(int);
    void checkup(int);
    void checkdown(int);
    void checkleft(int);
    void checkright(int);
    void checkv(int);
    void checkver(int);
    void checkhor(int);
    void checkw(int);
    void checka(int);
    void checks(int);
    void checkd(int);
};

BattleField::BattleField()
{
    for(int i=0;i<COLBOX;i++)
    {
        for(int j=1;j<BOX;j++)
        {
            rectangle2[j+10*i].setOrigin(-295-(j-1)*76,-45-i*60);
            rectangle2[j+10*i].setSize(sf::Vector2f(76,60));
            rectangle2[j+10*i].setOutlineThickness(-2);
            rectangle2[j+10*i].setOutlineColor(sf::Color(128,87,37));
            rectangle2[j+10*i].setFillColor(sf::Color(255,255,255,0));
        }
    }

    for(b=1;b<=6;b++)
    {
        rectangle2[b].setOutlineThickness(-3);
        rectangle2[b].setOutlineColor(sf::Color(0,0,0));
    }
}

void BattleField::checkh(int cnnt)
{
    if(b>=7 && b<=11)
                                rectangle2[100+cnnt].setOrigin(-295-(b-7)*76,-45);
                            else if(b>=17 && b<=21)
                                rectangle2[100+cnnt].setOrigin(-295-(b-17)*76,-45-60);
                            else if(b>=27 && b<=31)
                                rectangle2[100+cnnt].setOrigin(-295-(b-27)*76,-45-60*2);
                            else if(b>=37 && b<=41)
                                rectangle2[100+cnnt].setOrigin(-295-(b-37)*76,-45-60*3);
                            else if(b>=47 && b<=51)
                                rectangle2[100+cnnt].setOrigin(-295-(b-47)*76,-45-60*4);
                            else if(b>=57 && b<=61)
                                rectangle2[100+cnnt].setOrigin(-295-(b-57)*76,-45-60*5);
                            else if(b>=67 && b<=71)
                                rectangle2[100+cnnt].setOrigin(-295-(b-67)*76,-45-60*6);
                            else if(b>=77 && b<=81)
                                rectangle2[100+cnnt].setOrigin(-295-(b-77)*76,-45-60*7);
                            else if(b>=87 && b<=91)
                                rectangle2[100+cnnt].setOrigin(-295-(b-87)*76,-45-60*8);
                            else if(b>=97 && b<=101)
                            rectangle2[100+cnnt].setOrigin(-295-(b-97)*76,-45-60*9);
}
void BattleField::checkv(int cnnt)
{
    if(c==61 || c==71 || c==81 || c==91)
                                rectangle2[100+cnnt].setOrigin(-295,-((c-61)/10)*60-45);
                            else if(c==62 || c==72 || c==82 || c==92)
                                rectangle2[100+cnnt].setOrigin(-295-76,-((c-62)/10)*60-45);
                            else if(c==63 || c==73 || c==83 || c==93)
                                rectangle2[100+cnnt].setOrigin(-295-76*2,-((c-63)/10)*60-45);
                            else if(c==64 || c==74 || c==84 || c==94)
                                rectangle2[100+cnnt].setOrigin(-295-76*3,-((c-64)/10)*60-45);
                            else if(c==65 || c==75 || c==85 || c==95)
                                rectangle2[100+cnnt].setOrigin(-295-76*4,-((c-65)/10)*60-45);
                            else if(c==66 || c==76 || c==86 || c==96)
                                rectangle2[100+cnnt].setOrigin(-295-76*5,-((c-66)/10)*60-45);
                            else if(c==67 || c==77 || c==87 || c==97)
                                rectangle2[100+cnnt].setOrigin(-295-76*6,-((c-67)/10)*60-45);
                            else if(c==68 || c==78 || c==88 || c==98)
                                rectangle2[100+cnnt].setOrigin(-295-76*7,-((c-68)/10)*60-45);
                            else if(c==69 || c==79 || c==89 || c==99)
                                rectangle2[100+cnnt].setOrigin(-295-76*8,-((c-69)/10)*60-45);
                            else if(c==70 || c==80 || c==90 || c==100)
                                rectangle2[100+cnnt].setOrigin(-295-76*9,-((c-70)/10)*60-45);
                            else if(c>=2 && c<=11)
                                rectangle2[100+cnnt].setOrigin(-295-(c-2)*76,-45-4*60);
}

void BattleField::checkup(int cnnt)
{
    if(b!=7 && b!=8 && b!=9 && b!=10 && b!=11 && (chk!=22 && chk!=32 && chk!=42 && chk!=52 && chk!=62 && chk!=72 && chk!=82 && chk!=92 && chk!=102))
                    {
                        for(int z=11;z<=17-cnnt;z++)
                        {
                            rectangle2[b-z-cnt+1].setOutlineColor(sf::Color(0,0,0));
                            rectangle2[b-z-cnt+1].setOutlineThickness(-3);
                            rectangle2[b-z+10-cnt+1].setOutlineColor(sf::Color(128,87,37));
                        }
                        b-=10;
                        if(b<=41)
                            c=b+54;
                        else
                            c=b-45;
                    }
                    else if(cnnt==2 && (chk==22 || chk==32 || chk==42 || chk==52 || chk==62 || chk==72 || chk==82 || chk==92 || chk==102))
                    {
                        for(int z=11;z<=17-cnnt;z++)
                        {
                            rectangle2[chk-z-cnt+1].setOutlineColor(sf::Color(0,0,0));
                            rectangle2[chk-z-cnt+1].setOutlineThickness(-3);
                            rectangle2[chk-z+10-cnt+1].setOutlineColor(sf::Color(128,87,37));
                        }
                        chk-=10;
                        b-=10;
                    }
}
void BattleField::checkdown(int cnnt)
{
    if(b!=97 && b!=98 && b!=99 && b!=100 && b!=101 && (chk!=12 && chk!=22 && chk!=32 && chk!=42 && chk!=52 && chk!=62 && chk!=72 && chk!=82 && chk!=92))
                    {
                        for(int z=4;z<=10-cnnt;z++)
                        {
                            rectangle2[b+z].setOutlineColor(sf::Color(0,0,0));
                            rectangle2[b+z].setOutlineThickness(-3);
                            rectangle2[b-z+3-cnt+1].setOutlineColor(sf::Color(128,87,37));
                        }
                        b+=10;

                        if(b<=41)
                            c=b+54;
                        else
                            c=b-45;
                    }
                    else if(cnnt==2 && (chk==12 || chk==22 || chk==32 || chk==42 || chk==52 || chk==62 || chk==72 || chk==82 || chk==92))
                    {
                        for(int z=4;z<=10-cnnt;z++)
                        {
                            rectangle2[chk+z].setOutlineColor(sf::Color(0,0,0));
                            rectangle2[chk+z].setOutlineThickness(-3);
                            rectangle2[chk-z+3-cnt+1].setOutlineColor(sf::Color(128,87,37));
                        }
                        chk+=10;
                        b+=10;
                    }
}
void BattleField::checkleft(int cnnt)
{
    if(b!=7 && b!=17 && b!=27 && b!=37 && b!=47 && b!=57 && b!=67 && b!=77 && b!=87 && b!=97 && (chk!=12 && chk!=22 && chk!=32 && chk!=42 && chk!=52 && chk!=62 && chk!=72 && chk!=82 && chk!=92 && chk!=102))

                    {
                        for(int z=7;z>=1+cnnt;z--)
                        {
                            rectangle2[b-z].setOutlineColor(sf::Color(0,0,0));
                            rectangle2[b-z].setOutlineThickness(-3);
                            rectangle2[b-cnt].setOutlineColor(sf::Color(128,87,37));

                        }
                        b-=1;
                        if(b<=41)
                            c=b+54;
                        else
                            c=b-45;
                    }
                    else if(cnnt==2 && (chk==12 || chk==22 || chk==32 || chk==42 || chk==52 || chk==62 || chk==72 || chk==82 || chk==92 || chk==102))
                    {
                        for(int z=7;z>=1+cnnt;z--)
                        {
                            rectangle2[chk-z].setOutlineColor(sf::Color(0,0,0));
                            rectangle2[chk-z].setOutlineThickness(-3);
                            rectangle2[chk-cnt].setOutlineColor(sf::Color(128,87,37));

                        }
                        chk=b;

                    }


}
void BattleField::checkright(int cnnt)
{
    if(cnnt==2 && (chk==0 || chk==11 || chk==21 || chk==31 || chk==41 || chk==51 || chk==61 || chk==71 || chk==81 || chk==91 || chk==101) &&  (b==11 || b==21 || b==31 || b==41 || b==51 || b==61 || b==71 || b==81 || b==91 || b==101))
        chk=b;
    if(b!=11 && b!=21 && b!=31 && b!=41 && b!=51 && b!=61 && b!=71 && b!=81 && b!=91 && b!=101 && (chk!=12 && chk!=22 && chk!=32 && chk!=42 && chk!=52 && chk!=62 && chk!=72 && chk!=82 && chk!=92))
                    {
                        for(int z=5;z>=-1+cnnt;z--)
                        {
                            rectangle2[b-z].setOutlineColor(sf::Color(0,0,0));
                            rectangle2[b-z].setOutlineThickness(-3);
                            rectangle2[b-6].setOutlineColor(sf::Color(128,87,37));
                        }
                        b+=1;
                        if(b<=41)
                            c=b+54;
                        else
                            c=b-45;

                    }

                    else if(cnnt==2 && (chk==11 || chk==21 || chk==31 || chk==41 || chk==51 || chk==61 || chk==71 || chk==81 || chk==91 || chk==101 || b==11 || b==21 || b==31 || b==41 || b==51 || b==61 || b==71 || b==81 || b==91 || b==101))
                    {

                        for(int z=5;z>=1;z--)
                        {
                            rectangle2[chk-z].setOutlineColor(sf::Color(0,0,0));
                            rectangle2[chk-z].setOutlineThickness(-3);
                            rectangle2[chk-6].setOutlineColor(sf::Color(128,87,37));
                        }
                        chk+=1;

                    }
}
void BattleField::checkhor(int cnnt)
{
    if(((c>=61 && c<=65)||(c>=71 && c<=75)||(c>=81 && c<=85)||(c>=91 && c<=95)))
                            {
                                    for(int v=0;v<=5-cnnt;v++)
                                    {
                                        rectangle2[c-59+v].setOutlineColor(sf::Color(0,0,0));
                                        rectangle2[c-59+v].setOutlineThickness(-3);
                                        rectangle2[c-10*(5-v)].setOutlineColor(sf::Color(128,87,37));
                                    }
                            }
                            else if((c==2||c==3||c==4||c==5||c==6) && !(vchk>=12 && vchk<=17))
                            {
                                for(int v=0;v<=5-cnnt;v++)
                                    {
                                        rectangle2[c+40+v].setOutlineColor(sf::Color(0,0,0));
                                        rectangle2[c+40+v].setOutlineThickness(-3);
                                        rectangle2[c+10*(v+1)+39].setOutlineColor(sf::Color(128,87,37));
                                    }
                            }
                            else if(vchk>=12 && vchk<=17)
                            {
                                for(int v=0;v<=5-cnnt;v++)
                                    {
                                        rectangle2[vchk+40+v].setOutlineColor(sf::Color(0,0,0));
                                        rectangle2[vchk+40+v].setOutlineThickness(-3);
                                        rectangle2[vchk+10*(v+1)+39].setOutlineColor(sf::Color(128,87,37));
                                    }
                            }
}
void BattleField::checkver(int cnnt)
{
    if(!(b>=52 && b<=101) && !(chk==12 || chk==22 || chk==32 || chk==42 || chk==52 || chk==62 || chk==72 || chk==82 || chk==92 || chk==102))
                        {
                            for(int v=1;v<=6-cnnt;v++)
                            {
                                rectangle2[(b-6)+10*v].setOutlineColor(sf::Color(0,0,0));
                                rectangle2[(b-6)+10*v].setOutlineThickness(-3);
                                rectangle2[b-6+v].setOutlineColor(sf::Color(128,87,37));
                            }
}
else if(chk==12 || chk==22 || chk==32 || chk==42 || chk==52 || chk==62 || chk==72 || chk==82 || chk==92 || chk==102)
{
    for(int v=1;v<=6-cnnt;v++)
                            {
                                rectangle2[(chk-6)+10*v].setOutlineColor(sf::Color(0,0,0));
                                rectangle2[(chk-6)+10*v].setOutlineThickness(-3);
                                rectangle2[chk-6+v].setOutlineColor(sf::Color(128,87,37));
                            }
}
}
void BattleField::checka(int cnnt)
{
    if(c!=2 && c<=11) c+=99;
                            if(c!=61 && c!=71 && c!=81 && c!=91 && c!=2 && vchk!=13 && vchk!=14 && vchk!=15 && vchk!=16 && vchk!=17 && vchk!=18 && vchk!=19 && vchk!=20 && vchk!=21)
                            {
                                for(int z=0;z<=6-cnnt;z++)
                                {
                                    rectangle2[c-61+10*z].setOutlineColor(sf::Color(0,0,0));
                                    rectangle2[c-61+10*z].setOutlineThickness(-3);
                                    rectangle2[c-60+10*z].setOutlineColor(sf::Color(128,87,37));
                                }
                            c-=1;
                            if(c>100) c-=99;
                            if(c>=61)
                                b=c-54;
                            else
                                b=c+45;
                        }
                        else if(cnnt==2 && !(vchk!=13 && vchk!=14 && vchk!=15 && vchk!=16 && vchk!=17 && vchk!=18 && vchk!=19 && vchk!=20 && vchk!=21))
                        {
                            for(int z=0;z<=6-cnnt;z++)
                                {
                                    rectangle2[vchk-61+10*z+99].setOutlineColor(sf::Color(0,0,0));
                                    rectangle2[vchk-61+10*z+99].setOutlineThickness(-3);
                                    rectangle2[vchk-60+10*z+99].setOutlineColor(sf::Color(128,87,37));
                                }
                            vchk-=1;
                            c-=1;
                            if(c>100) c-=99;
                        }

}
void BattleField::checkd(int cnnt)
{
    if(c<=10) c+=99;
                            if(c!=70 && c!=80 && c!=90 && c!=100 && c!=11 && vchk!=12 && vchk!=13 && vchk!=14 && vchk!=15 && vchk!=16 && vchk!=17 && vchk!=18 && vchk!=19 && vchk!=20)
                            {
                                for(int z=0;z<=6-cnnt;z++)
                                {
                                    rectangle2[c-59+10*z].setOutlineColor(sf::Color(0,0,0));
                                    rectangle2[c-59+10*z].setOutlineThickness(-3);
                                    rectangle2[c-60+10*z].setOutlineColor(sf::Color(128,87,37));
                                }
                            c+=1;
                            if(c>100) c-=99;
                            if(c>=61)
                                b=c-54;
                            else
                                b=c+45;
                        }
                        else if(cnnt==2 && !(vchk!=12 && vchk!=13 && vchk!=14 && vchk!=15 && vchk!=16 && vchk!=17 && vchk!=18 && vchk!=19 && vchk!=20))
                                {
                                    for(int z=0;z<=6-cnnt;z++)
                                {
                                    rectangle2[vchk-59+10*z+99].setOutlineColor(sf::Color(0,0,0));
                                    rectangle2[vchk-59+10*z+99].setOutlineThickness(-3);
                                    rectangle2[vchk-60+10*z+99].setOutlineColor(sf::Color(128,87,37));
                                }
                                    vchk+=1;
                                    c+=1;
                                    if(c>100) c-=99;
                                }
}
void BattleField::checks(int cnnt)
{
    if(cnnt==2 && !(c!=2 && c!=3 && c!=4 && c!=5 && c!=6 && c!=7 && c!=8 && c!=9 && c!=10 && c!=11) && !(vchk!=0 && vchk!=2 && vchk!=3 && vchk!=4 && vchk!=5 && vchk!=6 && vchk!=7 && vchk!=8 && vchk!=9 && vchk!=10 && vchk!=11))
        vchk=c;
    if(c!=2 && c!=3 && c!=4 && c!=5 && c!=6 && c!=7 && c!=8 && c!=9 && c!=10 && c!=11 && (vchk!=12 && vchk!=13 && vchk!=14 && vchk!=15 && vchk!=16 && vchk!=17 && vchk!=18 && vchk!=19 && vchk!=20))
                        {
                            for(int z=0;z<=6-cnnt;z++)
                            {
                                rectangle2[c-10*(5-z)].setOutlineColor(sf::Color(0,0,0));
                                rectangle2[c-10*(5-z)].setOutlineThickness(-3);
                                rectangle2[c-60].setOutlineColor(sf::Color(128,87,37));
                            }
                            c+=10;
                            if(c>100)
                                c-=99;
                            if(c>=61)
                                b=c-54;
                            else
                                b=c+45;
                        }
                        else if(cnnt==2 && !(c!=2 && c!=3 && c!=4 && c!=5 && c!=6 && c!=7 && c!=8 && c!=9 && c!=10 && c!=11) && !(vchk!=2 && vchk!=3 && vchk!=4 && vchk!=5 && vchk!=6 && vchk!=7 && vchk!=8 && vchk!=9 && vchk!=10 && vchk!=11))
                        {
                            for(int z=0;z<=6-cnnt;z++)
                            {
                                rectangle2[vchk+99-10*(5-z)].setOutlineColor(sf::Color(0,0,0));
                                rectangle2[vchk+99-10*(5-z)].setOutlineThickness(-3);
                                rectangle2[vchk-60+99].setOutlineColor(sf::Color(128,87,37));
                            }
                            vchk+=10;
                        }
}
void BattleField::checkw(int cnnt)
{
    if(c<=11) c+=99;
                            if(c!=61 && c!=62 && c!=63 && c!=64 && c!=65 && c!=66 && c!=67 && c!=68 && c!=69 && c!=70 && (vchk!=12 && vchk!=13 && vchk!=14 && vchk!=15 && vchk!=16 && vchk!=17 && vchk!=18 && vchk!=19 && vchk!=20 && vchk!=21))
                            {
                                for(int z=0;z<=6-cnnt;z++)
                                {
                                    rectangle2[c-10*(7-z)].setOutlineColor(sf::Color(0,0,0));
                                    rectangle2[c-10*(7-z)].setOutlineThickness(-3);
                                    rectangle2[c-10*cnnt].setOutlineColor(sf::Color(128,87,37));
                                }
                            c-=10;
                            if(c>=61)
                                b=c-54;
                            else
                                b=c+45;
                        }
                        else if(cnnt==2 && !(vchk!=12 && vchk!=13 && vchk!=14 && vchk!=15 && vchk!=16 && vchk!=17 && vchk!=18 && vchk!=19 && vchk!=20 && vchk!=21))
                        {
                            for(int z=0;z<=6-cnnt;z++)
                                {
                                    rectangle2[vchk-10*(7-z)+99].setOutlineColor(sf::Color(0,0,0));
                                    rectangle2[vchk-10*(7-z)+99].setOutlineThickness(-3);
                                    rectangle2[vchk-10*cnnt+99].setOutlineColor(sf::Color(128,87,37));
                                }
                                if(c>100) c-=99;
                                vchk=c;
                        }

}
int BattleField::run(sf::RenderWindow &app)
{
    sf::Texture texture5;
    if (!texture5.loadFromFile("Ship.png", sf::IntRect(0, 0,456, 60)))
    {
        std::cout<<"error...";
    }

    sf::Texture texture7;
    if (!texture7.loadFromFile("Ship2.png", sf::IntRect(0, 0,456, 60)))
    {
        std::cout<<"error...";
    }

    sf::Texture texture8;
    if (!texture8.loadFromFile("Vship.png", sf::IntRect(0, 0,76,360)))
    {
        std::cout<<"error...";
    }

    sf::Texture texture98;
    if (!texture98.loadFromFile("Vship2.png", sf::IntRect(0, 0,76,360)))
    {
        std::cout<<"error...";
    }

    sf::Texture texture2;
    if (!texture2.loadFromFile("water.png", sf::IntRect(0, 0,760, 600)))
    {
        std::cout<<"error...";
    }

    rectangle2[0].setOrigin(-295,-45);
    rectangle2[0].setSize(sf::Vector2f(760,600));
    rectangle2[0].setTexture(&texture2);
    rectangle2[0].setTextureRect(sf::IntRect(0,0,760,600));
    rectangle2[0].setFillColor(sf::Color(255, 255, 255, 130));

    sf::Event event;

    bool running=true;

    while(running)
    {
        while(app.pollEvent(event))
        {
            if(event.type==sf::Event::Closed)
                return (-1);
            if(event.type==sf::Event::KeyPressed)
            {
                switch (event.key.code)
                {
                case sf::Keyboard::Escape:
                    return 0;
                    break;

                case sf::Keyboard::Up:

                    if(ch!='w' && ch!='a' && ch!='s' && ch!='d' && ch!='v')
                    {
                    checkup(cnt);
                    ch='u';
                    }
                    break;

                case sf::Keyboard::Down:
                    if(ch!='w' && ch!='a' && ch!='s' && ch!='d' && ch!='v')
                    {
                    checkdown(cnt);
                    ch='D';
                    }
                    break;

                case sf::Keyboard::Left:
                    if(ch!='w' && ch!='a' && ch!='s' && ch!='d' && ch!='v')
                    {
                    checkleft(cnt);
                    ch='l';
                    }
                    break;

                case sf::Keyboard::Right:
                    if(ch!='w' && ch!='a' && ch!='s' && ch!='d' && ch!='v')
                    {
                    checkright(cnt);
                    ch='r';
                    }
                    break;

                    case sf::Keyboard::H:
                        if(ch=='w' || ch=='a' || ch=='s' || ch=='d' || ch=='v')
                        {
                            checkhor(cnt);
                                if(c>=61)
                                    b=c-54;
                                else
                                    b=c+45;
                                ch='h';

                        }
                    break;

                case sf::Keyboard::V:
                    if(ch=='l' || ch=='r' || ch=='u' || ch=='D' || ch=='h')
                    {
                        checkver(cnt);
                            if(b<=41)
                                c=b+54;
                            else
                                c=b-45;
                            ch='v';

                    }
                    break;

                    case sf::Keyboard::W:
                        if(ch!='l' && ch!='r' && ch!='u' && ch!='D' && ch!='h')
                        {
                            checkw(cnt);
                        ch='w';
                        }
                        break;

                    case sf::Keyboard::S:
                        if(ch!='l' && ch!='r' && ch!='u' && ch!='D' && ch!='h')
                        {
                        checks(cnt);
                        ch='s';
                        }
                        break;

                    case sf::Keyboard::A:
                        if(ch!='l' && ch!='r' && ch!='u' && ch!='D' && ch!='h')
                        {
                            checka(cnt);
                        ch='a';
                        }
                        break;

                    case sf::Keyboard::D:
                        if(ch!='l' && ch!='r' && ch!='u' && ch!='D' && ch!='h')
                        {
                            checkd(cnt);
                        ch='d';
                        }
                        break;

                    case sf::Keyboard::Return:

                        if(cnt==1)
                        {
                        if(ch=='l' || ch=='r' || ch=='u' || ch=='D' || ch=='h')
                        {
                            checkh(cnt);
                            rectangle2[100+cnt].setSize(sf::Vector2f(456,60));
                            rectangle2[100+cnt].setTexture(&texture5);
                            rectangle2[100+cnt].setTextureRect(sf::IntRect(0,0,456,60));
                            rectangle2[100+cnt].setFillColor(sf::Color(255, 255, 255, 130));
                        }
                        if(ch=='w' || ch=='a' || ch=='s' || ch=='d' || ch=='v')
                        {
                            checkv(cnt);
                            rectangle2[100+cnt].setSize(sf::Vector2f(76,360));
                            rectangle2[100+cnt].setTexture(&texture8);
                            rectangle2[100+cnt].setTextureRect(sf::IntRect(0,0,76,360));
                            rectangle2[100+cnt].setFillColor(sf::Color(255, 255, 255, 130));
                        }
                        cnt++;
                        }
                        else if(cnt==2)
                        {
                            if(ch=='l' || ch=='r' || ch=='u' || ch=='D' || ch=='h')
                        {
                            checkh(cnt);
                            rectangle2[102].setSize(sf::Vector2f(380,60));
                            rectangle2[102].setTexture(&texture7);
                            rectangle2[102].setTextureRect(sf::IntRect(0,0,380,60));
                            rectangle2[102].setFillColor(sf::Color(255, 255, 255, 130));
                        }
                        if(ch=='w' || ch=='a' || ch=='s' || ch=='d' || ch=='v')
                        {
                            checkv(cnt);
                            rectangle2[102].setSize(sf::Vector2f(76,300));
                            rectangle2[102].setTexture(&texture98);
                            rectangle2[102].setTextureRect(sf::IntRect(0,0,76,360));
                            rectangle2[102].setFillColor(sf::Color(255, 255, 255, 130));
                        }
                        cnt++;
                        }


                    break;

                default:
                    break;

                }
            }
        }

        app.clear();

        for(int k=0;k<103;k++)
        {
            app.draw(rectangle2[k]);
        }

        app.display();

    }
return -1;
}

#endif // BATTLEFIELD_HPP_INCLUDED
